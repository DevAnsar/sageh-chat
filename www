#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
// var debug = require('debug')('sageh_node:server');
var http = require('http').createServer(app);
var io=require("socket.io")(http,{
    cors: {
        origin:process.env.ORIGIN || 'http://localhost:3000',
        // origin: "http://sageh.ir",
        methods: ["GET", "POST"],
        credentials: true
      }
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3650');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

http.listen(port);
http.on('error', onError);
http.on('listening', onListening);



/**
 * Listen on provided port, on all network interfaces.
 */
io.on('connection', (socket) => {
     /* socket object may be used to send specific messages to the new connected client */

    
    console.log('new client connected',socket.id);
    socket.emit('connection', null);

    socket.on('send-message', (message,channels) => {
        //save meesage
        console.log('one send-message')
        io.emit('message',{message,channels});
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = http.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    
    console.log('Listening on ' + bind);
    // debug('Listening on ' + bind);
}
